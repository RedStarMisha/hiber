EntityManager(Session в hibernate) - интерфейс для связи с PersistanceContext. Через него проходят все операции с бд и транзации. Создается и работает в рамках транзакции
EntityManagerFactory(SessionFactory в hibernate) - фабрика для создания EntityManager. Связана с persistence unit. Создается при запуске приложения
PErsistanceContext - кэш первого уровня. создается при открытии транзакции. по завершению транзакции сохраняется и очищается

--Параметры сущности
JavaBEans - они же POJO, но должны иметь дефолтный контсруктор и геттеры и сеттеры начинающиеся с set и get. Поля должны быть приватные или protected
В Hibernate доступ можно получать как через поле, так и через геттеры\сеттеры. По дефолту через поле. Для зименения можно над полем или классом применить аннотацию @Access. Можно задавать параметры над методом(над геттером). К примеру параметры id (@Id @GeneratedValue) можно повесить над геттером. Это укажет что доступ будет через методы, а не через поле
Возвращать через геттер можно другой экземпляр того же класса что и поле. Но коллекции должны возвращать именно тот экземпляр. Данное правило применимо когда доступ к сущностям через геттеры и сеттеры.
В качестве коллекций JPA требует использовать интерфейсы (List, Set, Collection), а не реализацию
Хорошая практика через геттеры возвращать неизменяемые коллекции переупаковывая аттрибут модели(для ситуации когда доступ к аттрибутам через поля - по дефолту) и делать отдельный методы к примеру для добавления сущности в коллекцию (вспомогательные методы)

--Аннотации
@Entity указывает что класс со своими полями теперь сохраняемый
Делать сеттер для Id плохая практика т.к он не переопределяется(в hibernatedhjlt)
@GeneratedValue - аннотация указывающая как генерить ID. Sequence по идее быстрее. почитать сравнение
@SequenceGenerator настраивает параметры генератора если выбрана стратегия Sequence. Имя стратегии по дефолту выбирается равной имени класса
@Immutable - аннотация Hibernate. Указывает что сущность неизменяемая(на уровне persistanse). в JPA такой нет

@Transient - указывает, что поле класса не будет хранимым и не будет записываться в
@Coulumn(nullable) указывает что поле класса может (или не может) иметь null значение. обычно нужно когда поле бд NOT_NULL.Если объект с null полем будет отправлен на сохранение, то будет брошена ошибка. Можно вместо применить @NotNull
@Formula - может выводить значение после преобразование какой-нибудь колонки (преобразованием в sql). к примеру можно применить среднее значение, абсолютное значение или сабстринг для текста
@ColumnTransformer - необходимо для преобразования значения (напрнимер для перевода веса или расстояния в систему СИ и т.д)

@Generated указывает что значение будет сгенерировано БД. Можно указать что будет генериться как при вставке, там и при обновлении (ключ event). Удобно к примеру для поля "последнее обновление"
@ColumnDefault указывает значение колонки по умолчанию. Используется при автоматический генерации схемы. Может использоваться в сочетании с @Generated и @DynamicInsert. Если значение @Generatedне используется, defaultоно может привести к потере синхронизации состояния, хранящегося в памяти, с базой данных.
@PrePersist вешается над методом в котором можно описать какие значения присвоить если к примеру поля null. метод позволяет нам программно устанавливать значения по умолчанию до того, как сущность будет сохранена. Это может быть полезно, если мы хотим гарантировать, что значения по умолчанию будут установлены, даже если сущность не инициализирована должным образом или если некоторые поля имеют значение null.
@CreationTimestamp для генерации временной метки

@Temporal - применяется над полем имеющем тип время (в ситуации когда нет конвертера). Если аннотации нет, то в базу по умолчанию пишется TemporalType.TimeStamp